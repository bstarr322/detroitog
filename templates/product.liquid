<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">
  
  <div class="wrapper">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

    {% include 'breadcrumb' %}

    <div class="grid product-single">
      <div class="grid__item large--one-half xlarge--two-thirds text-center product-single__gallery">
        <div class="product-single__photos" id="ProductPhoto" data-mh="match-product-panel">
          {% include 'product-gallery' %}
        </div>
      </div>

      <div class="grid__item large--one-half xlarge--one-third product-single__details">
        
        <div class="product-single__content" data-mh="match-product-panel">

          <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
            <meta itemprop="priceCurrency" content="{{ shop.currency }}">

            <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

            <header class="product-single__header">
              <h1 itemprop="name">
                Detroit OG<sup>Â®</sup> - {{ product.title }}
              </h1>
              <div class="product-single__price">
                <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
                <span class="ProductPrice h3" itemprop="price" content="{{ current_variant.price | divided_by: 100.00 }}">
                  {{ current_variant.price | money }}
                </span>

                {% if product.compare_at_price_max > product.price %}
                  <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
                  <span class="ComparePrice">{{ current_variant.compare_at_price | money }}</span>
                {% endif %}
              </div>
            </header>
            
            <div class="free-shipping-popup-container">
              <a id="modal-free-shipping-toggle" href="#modal-free-shipping" class="free-shipping-popup-toggle">
                {% include 'free-shipping-icon' %}
                <div>
                  <strong>FREE SHIPPING</strong>
                  <small>View Our Return Policy</small>
                </div>
              </a>
            </div>

            {% comment %}
              ID addToCartForm is a selector for the ajax cart plugin
            {% endcomment %}
            <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical">
              
              <div class="sku_style clearfix">
                <p class="product-single__availability">
                  <span id="product-variant-availability">
                    {% if current_variant.available %}
                      <strong>Availability:</strong> <span class="text-success">In Stock</span>
                    {% else %}
                      <strong>Availability:</strong> <span class="text-danger">Sold Out</span>
                    {% endif %}
                  </span>
                </p>
              </div>
              
              <div class="product-description" itemprop="description">
                {{ product.description }}
              </div>

              {% comment %}
                Add product variants as a dropdown.
                  - By default, each variant (or combination of variants) will display as its own <option>
                  - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

                You can leverage jQuery to add a callback on page load and each time the select element changes:
                  - Include option_selection.js (as seen at the bottom of this file)
                  - This allows you to use JavaScript anytime the variant dropdown changes
                  - This also separates out your variant options (ie. size, color, etc.) to separate select elements

                For more information on products with multiple options, visit:
                  - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
              {% endcomment %}
              <select name="id" id="productSelect-{{product.id}}" class="product-single__variants">
                {% for variant in product.variants %}
                  {% if variant.available %}

                    {% comment %}
                      Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                    {% endcomment %}
                    <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

                  {% else %}
                    <option disabled="disabled">
                      {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                    </option>
                  {% endif %}
                {% endfor %}
              </select>
                
              {% if product.available and product.variants.size > 1 %}
                {% for option in product.options %}
                  {% include 'swatch' with option %}
                {% endfor %}
              {% endif %}

              <div class="product-single__featured-links">
                <a id="modal-size-chart-toggle" href="#modal-size-chart" class="size-chart-toggle__btn" style="display:none;">
                  <img src="{{ 'size-chart-icon.png' | asset_url }}" alt="" width="24" height="24">
                  Size Chart
                </a>
                <a href="/pages/return-policy" class="product-details__shipping hide">
                  <span class="product-details__shipping-van">
                    <svg class="new-icon icon-truck"><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-shipping"><svg id="icon-shipping" viewBox="0 0 41 18" width="100%" height="100%">
                      <title>shipping truck</title>
                      <g fill-rule="nonzero" fill="none">
                        <path d="M40.474 7.434H39l-.858-5.016c-.046-.253-.265-.442-.52-.442h-5.978V.536c0-.296-.24-.536-.53-.536H12.527c-.29 0-.527.24-.527.536v14.142c0 .298.237.54.527.54h2.677C15.454 16.793 16.8 18 18.414 18c1.615 0 2.96-1.207 3.21-2.783h9.816C31.693 16.794 33.035 18 34.65 18c1.616 0 2.956-1.207 3.21-2.783h2.614c.29 0 .526-.24.526-.54V7.972c0-.297-.234-.536-.526-.536zm-19.866 7.38c-.068 1.175-1.025 2.11-2.195 2.11-1.213 0-2.2-1.006-2.2-2.246 0-1.238.987-2.244 2.2-2.244 1.17 0 2.127.935 2.195 2.11.005.093.005.19 0 .27zm14.04 2.11c-1.17 0-2.133-.94-2.195-2.126-.003-.06-.003-.188 0-.238.062-1.18 1.024-2.127 2.196-2.127 1.215 0 2.2 1.007 2.2 2.245 0 1.24-.985 2.246-2.2 2.246zm5.3-2.783h-2.09c-.252-1.575-1.593-2.782-3.21-2.782-1.613 0-2.955 1.207-3.208 2.783h-9.815c-.252-1.575-1.596-2.782-3.212-2.782-1.613 0-2.958 1.207-3.21 2.783h-2.15V1.076H30.59v7.052c0 .3.236.54.525.54.29 0 .53-.24.53-.54V3.053h5.534l.86 5.01c.043.26.262.446.52.446h1.388v5.63z" fill="#737373"></path>
                        <path d="M11.454 11H4.547c-.303 0-.547.224-.547.5 0 .277.244.5.547.5h6.907c.302 0 .546-.223.546-.5 0-.276-.244-.5-.546-.5zM11.464 4H3.538C3.24 4 3 4.226 3 4.5c0 .28.24.5.538.5h7.926c.296 0 .536-.22.536-.5 0-.274-.24-.5-.536-.5zM10.45 7H5.553C5.25 7 5 7.225 5 7.5c0 .276.25.5.554.5h4.895c.304 0 .55-.224.55-.5 0-.275-.246-.5-.55-.5zM3.633 7H.37C.166 7 0 7.225 0 7.5c0 .276.166.5.37.5h3.263C3.836 8 4 7.776 4 7.5c0-.275-.164-.5-.367-.5z" fill="#C8C8C8"></path>
                      </g></svg></use></svg>
                  </span>
                  <span class="text-link">Free Returns and Exchanges!</span>
                </a>
              </div>

              <div class="product-single__AddToCart clearfix">
                <label for="Quantity" class="quantity-selector hide">{{ 'products.product.quantity' | t }}</label>
                <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">

                <button type="submit" name="add" id="AddToCart" class="btn btn-glow">
                  <span id="AddToCartText">Add to Cart</span>
                </button>
              </div>
                
              <div class="product-form__item product-form__bis hide_bis">
                <button id="BIS_trigger" type="button" class="btn btn--secondary product-form__bis-btn"
                    data-toggle="tooltip"
                    data-placement="top"
                    title="Sign up and receive an e-mail as soon as this item arrives in stock">Sold Out, Email me when available</button>
              </div>
            </form>

          </div>
        </div>
      </div>
    </div>

    {% include 'related-products' %}
      
    {% include 'recently-viewed' %}

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}

<script>
  var selectCallback{{product.id}} = function(variant, selector){
    console.log("Variant is Selected");
    
    var allVSelected = true;
    var form = jQuery('#' + selector.domIdPrefix).closest('form');
    
    // Get Variant Option Status
    var checked_count = 0;
    var option_size = form.data('optionSize');
    
    $("[data-option-index]").find('input').each(function(i, v){
      if ($(v)[0].checked) {
        checked_count ++;
      }
    });

    // BEGIN SWATCHES
    
    if (variant) {

      if(variant.featured_image){
        // Get Variant Image
        var switchImage_src = variant.featured_image.src;
        var slashIndexOf = switchImage_src.lastIndexOf('/');
        var questionIndexOf = switchImage_src.lastIndexOf('.');
        var switchImage = switchImage_src.substr(slashIndexOf + 1, questionIndexOf - slashIndexOf - 1);

        // Select Thumbnail Image when select variant color.
        var $activeCarousel = jQuery('.product_gallery ul li.lslide.active');

        if (typeof $activeCarousel.data('thumb') != 'undefined' && $activeCarousel.data('thumb').indexOf(switchImage) < 0 ) {

          let productCarousel = jQuery('.product_gallery ul li');

          for (let i = 0; i < productCarousel.length; i++) {
            if(productCarousel[i].getAttribute('data-thumb') !== null && productCarousel[i].getAttribute('data-thumb').indexOf(switchImage) > 0) {
              // i = index of the selected variant image.
              console.log("Product Thumb Index - " + i);

              if (typeof window.productCarousel != 'undefined') {
                window.productCarousel.goToSlide(i);
              }else {
                // If it's based on other slider like slick.
                $(productCarousel[i]).trigger('click');
              }
              break;
            }
          }
        }
      }
    
      // Change Variant SKU
      $('.product-sku').text(variant.sku);
      
      // Show price of the currently selected variant
      $('.ProductPrice').html('<strong>' + Shopify.formatMoney(variant.price) +'</strong>');
      $('.ComparePrice span').html(Shopify.formatMoney(variant.compare_at_price));

      if (variant.available) {
        // Availability with a 'In Stock' message
        $('#product-variant-availability').html('<strong>Availability:</strong> <span class="text-success">In Stock</span>');

      } else {
        // Availability with a 'Out of Stock' message
        $('#product-variant-availability').html('<strong>Availability:</strong> <span class="text-danger">Sold Out</span>');
      }
    }else{
      $('.product-sku').empty();
    }

    //Available Check
    if(variant && variant.available){
      // Show Add to Cart Button
      for (var i=0,length=variant.options.length; i<length; i++) {
        var radioButton = form.find('.swatch[data-option-index="' + i + '"] :radio[value="' + variant.options[i] +'"]');
        if (radioButton.size() && !radioButton.get(0).checked) {
          allVSelected = false;
          break;
        }
      }
      if (allVSelected) {
        $('#AddToCart').html('<span class="default">Add to Cart</span>');
        $('#AddToCart').removeClass('disabled').removeAttr('disabled');
      } else {
        $('#AddToCart').addClass('disabled').attr('disabled', 'disabled');
        $('#AddToCart').html('<span>Make a Selection</span>');
        $('.product-form__bis').addClass('hide_bis');
      }
      
      $('#AddToCart').show();
      $('.product-form__bis').hide();

    } else {
      // Hide Add to Cart button
      if (checked_count == parseInt(option_size)) {
        $('#AddToCart').hide();
        $('.product-form__bis').removeClass('hide_bis');
        $('.product-form__bis').show();
      }
    }
    // END SWATCHES
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect-{{product.id}}', {
      product: {{ product | json }},
      onVariantSelected: selectCallback{{product.id}},
      enableHistoryState: true
    });
    
    setTimeout(function() {

      // Unchecked when make a selection.    
      var radios = jQuery('.product-form__item--swatch').find("input[type='radio']");
      for ( i = 0; i < radios.length; i++ ) {
        radios.get(i).checked = false;
      }
      
      // Make a Selection
      {% if product.variants.size > 1 %}
        $('#AddToCart').addClass('disabled').attr('disabled', 'disabled');
        $('#AddToCart').html('<span>Make a Selection</span>');
      	$('.product-form__bis').addClass('hide_bis');
      
        {% unless product.available %}
          $('#AddToCart').show();
        {% endunless %}
      
      {% else %}
        $('.product-sku').css('display', 'inline-block');
      	{% unless product.available %}
      		$('#AddToCart').addClass('disabled').hide();
      		$('.product-form__bis').removeClass('hide_bis');
      	{% endunless %}
      {% endif %}
      
    }, 100);

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
  
  // Swatch label
  // Swatch tooltip fix
  $(document).ready(function(){
    $('.swatch-element > input[type=radio][data-title]').on('change', function () {
      $(this).parents('.product-form__item--swatch').find('>p').html($(this).data('title'));
    });
  });
</script>
